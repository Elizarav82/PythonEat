import random
import tkinter as tk
from tkinter import ttk, messagebox

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤

recipes = {
    "–∑–∞–≤—Ç—Ä–∞–∫": {
        "–û–≤—Å—è–Ω–æ–±–ª–∏–Ω —Å —Å—ã—Ä–æ–º –∏ –≤–µ—Ç—á–∏–Ω–æ–π":
            ["–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è", "–Ø–π—Ü–æ", "–°—ã—Ä", "–í–µ—Ç—á–∏–Ω–∞"],
        "–°–º—É–∑–∏ –∑–µ–ª–µ–Ω—ã–π":
            ["–®–ø–∏–Ω–∞—Ç", "–ë–∞–Ω–∞–Ω", "–ô–æ–≥—É—Ä—Ç", "–ú–µ–¥"],
        "–¢–æ—Å—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —è–π—Ü–æ–º-–ø–∞—à–æ—Ç":
            ["–•–ª–µ–±", "–ê–≤–æ–∫–∞–¥–æ", "–Ø–π—Ü–æ", "–°–ø–µ—Ü–∏–∏"],
        "–ì—Ä–∞–Ω–æ–ª–∞ —Å –π–æ–≥—É—Ä—Ç–æ–º":
            ["–ì—Ä–∞–Ω–æ–ª–∞", "–ô–æ–≥—É—Ä—Ç", "–Ø–≥–æ–¥—ã", "–ú–µ–¥"],
        "–Ø–∏—á–Ω–∏—Ü–∞ –≤ –∞–≤–æ–∫–∞–¥–æ":
            ["–ê–≤–æ–∫–∞–¥–æ", "–Ø–π—Ü–æ", "–°–ø–µ—Ü–∏–∏", "–ó–µ–ª–µ–Ω—å"]
    },
    "–æ–±–µ–¥": {
        "–ö—É—Ä–∏–Ω—ã–π —Å—É–ø —Å –ª–∞–ø—à–æ–π":
            ["–ö—É—Ä–∏—Ü–∞", "–õ–∞–ø—à–∞", "–ú–æ—Ä–∫–æ–≤—å", "–õ—É–∫"],
        "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å":
            ["–ö—É—Ä–∏–Ω–∞", "–°–∞–ª–∞—Ç", "–°—É—Ö–∞—Ä–∏–∫–∏", "–°–æ—É—Å –¶–µ–∑–∞—Ä—å"],
        "–ì—Ä–µ—á–Ω–µ–≤–∞—è –ª–∞–ø—à–∞ —Å –æ–≤–æ—â–∞–º–∏":
            ["–ì—Ä–µ—á–Ω–µ–≤–∞—è –ª–∞–ø—à–∞", "–ü–µ—Ä–µ—Ü", "–ú–æ—Ä–∫–æ–≤—å", "–°–æ—É—Å —Å–æ–µ–≤—ã–π"],
        "–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã —Å –ø—é—Ä–µ":
            ["–§–∞—Ä—à –∫—É—Ä–∏–Ω—ã–π", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–õ—É–∫", "–Ø–π—Ü–æ"],
        "–û–≤–æ—â–Ω–æ–π —Ä–∞—Ç–∞—Ç—É–π":
            ["–ö–∞–±–∞—á–æ–∫", "–ë–∞–∫–ª–∞–∂–∞–Ω", "–ü–æ–º–∏–¥–æ—Ä", "–ü–µ—Ä–µ—Ü"]
    },
    "—É–∂–∏–Ω": {
        "–õ–æ—Å–æ—Å—å —Å –æ–≤–æ—â–∞–º–∏ –Ω–∞ –ø–∞—Ä—É":
            ["–õ–æ—Å–æ—Å—å", "–ë—Ä–æ–∫–∫–æ–ª–∏", "–ú–æ—Ä–∫–æ–≤—å", "–õ–∏–º–æ–Ω"],
        "–¢—ã–∫–≤–µ–Ω–Ω—ã–π –∫—Ä–µ–º-—Å—É–ø":
            ["–¢—ã–∫–≤–∞", "–°–ª–∏–≤–∫–∏", "–ò–º–±–∏—Ä—å", "–ì—Ä–µ–Ω–∫–∏"],
        "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞":
            ["–¢–≤–æ—Ä–æ–≥", "–Ø–π—Ü–æ", "–ú–∞–Ω–∫–∞", "–ò–∑—é–º"],
        "–û–º–ª–µ—Ç —Å –≥—Ä–∏–±–∞–º–∏":
            ["–Ø–π—Ü–∞", "–®–∞–º–ø–∏–Ω—å–æ–Ω—ã", "–°—ã—Ä", "–ó–µ–ª–µ–Ω—å"],
        "–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º":
            ["–¢—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–Ø–π—Ü–æ", "–û–≥—É—Ä–µ—Ü", "–ö—É–∫—É—Ä—É–∑–∞"]
    }
}

"""–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
class RoundedButton(tk.Canvas):
    def __init__(self, master=None, text="", radius=25, bg="#2E86AB", fg="white",
                 font=("Arial", 12, "bold"), command=None, width=120, height=40, **kwargs):
        super().__init__(master, width=width, height=height, highlightthickness=0, **kwargs)
        self.command = command
        self.radius = radius
        self.bg = bg
        self.fg = fg
        self.font = font
        self.text = text
        self.width = width
        self.height = height
        # –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        self.bind("<Button-1>", self._on_click)
        self.bind("<Enter>", self._on_enter)
        self.bind("<Leave>", self._on_leave)

        self.draw_button()

    def draw_button(self):
        self.delete("all")
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        self.create_rectangle(
            (self.radius, 0, self.width - self.radius, self.height),
            fill=self.bg, outline=self.bg
        )
        self.create_rectangle(
            (0, self.radius, self.width, self.height - self.radius),
            fill=self.bg, outline=self.bg
        )
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        self.create_oval(
            (0, 0, self.radius * 2, self.radius * 2),
            fill=self.bg, outline=self.bg
        )
        self.create_oval(
            (self.width - self.radius * 2, 0, self.width, self.radius * 2),
            fill=self.bg, outline=self.bg
        )
        self.create_oval(
            (0, self.height - self.radius * 2, self.radius * 2, self.height),
            fill=self.bg, outline=self.bg
        )
        self.create_oval(
            (self.width - self.radius * 2, self.height - self.radius * 2, self.width, self.height),
            fill=self.bg, outline=self.bg
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
        self.create_text(
            self.width // 2,
            self.height // 2,
            text=self.text,
            fill=self.fg,
            font=self.font
        )

    def _on_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""
        if self.command:
            self.command()

    def _on_enter(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É (—ç—Ñ—Ñ–µ–∫—Ç hover)"""
        self.config(cursor="hand2")
        lighter_bg = self.lighten_color(self.bg)
        self.bg = lighter_bg
        self.draw_button()

    def _on_leave(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∏"""
        self.config(cursor="")
        darker_bg = self.darken_color(self.bg)
        self.bg = darker_bg
        self.draw_button()

    def lighten_color(self, color):
        """–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ hover"""
        if color == "#2E86AB": return "#3FA0C9"
        if color == "#A23B72": return "#C44D8A"
        return color

    def darken_color(self, color):
        """–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ hover"""
        if color == "#3FA0C9": return "#2E86AB"
        if color == "#C44D8A": return "#A23B72"
        return color


def generate_recipe():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
    selected_meal = meal_var.get()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    if not selected_meal:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏!")
        return

    if selected_meal not in recipes:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏!")
        return
    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞ –∏ –µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    dish, ingredients = random.choice(list(recipes[selected_meal].items()))

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for widget in result_frame.winfo_children():
        widget.destroy()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    result_container = tk.Frame(result_frame, bg="#FFFFFF", bd=2, relief=tk.GROOVE)
    result_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—Ü–µ–ø—Ç–∞
    tk.Label(result_container, text="üçΩÔ∏è –í–ê–® –†–ï–¶–ï–ü–¢",
             font=("Arial", 14, "bold"), fg="#2E86AB", bg="#FFFFFF").pack(pady=(15, 5))

    # –ü—Ä–∏–µ–º –ø–∏—â–∏
    tk.Label(result_container, text=f"–ü—Ä–∏–µ–º –ø–∏—â–∏: {selected_meal.upper()}",
             font=("Arial", 11, "bold"), fg="#A23B72", bg="#FFFFFF").pack(pady=2)

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ttk.Separator(result_container, orient='horizontal').pack(fill='x', padx=20, pady=8)

    # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
    tk.Label(result_container, text=dish,
             font=("Arial", 14, "bold"), fg="#F18F01", bg="#FFFFFF",
             wraplength=400, justify="center").pack(pady=5)

    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredients_frame = tk.Frame(result_container, bg="#FFFFFF")
    ingredients_frame.pack(pady=8)

    tk.Label(ingredients_frame, text="üîé –ì–ª–∞–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:",
             font=("Arial", 11, "bold"), fg="#2E86AB", bg="#FFFFFF").pack(pady=(0, 5))

    for ingredient in ingredients[:3]:
        tk.Label(ingredients_frame, text=f"‚Ä¢ {ingredient}",
                 font=("Arial", 10), fg="#333333", bg="#FFFFFF").pack(pady=1)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    RoundedButton(result_container, text="üé≤ –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç", command=generate_recipe,
                  bg="#2E86AB", fg="white", font=("Arial", 10, "bold"),
                  width=140, height=35).pack(pady=15)


def random_meal():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
    meal_var.set(random.choice(list(recipes.keys())))
    generate_recipe()


# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("üç≥ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤")
root.geometry("500x700")
root.configure(bg="#F8F9FA")
root.resizable(False, False)

# –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
main_frame = tk.Frame(root, bg="#F8F9FA", padx=20, pady=15)
main_frame.pack(fill=tk.BOTH, expand=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
header_frame = tk.Frame(main_frame, bg="#F8F9FA")
header_frame.pack(pady=(0, 15))

tk.Label(header_frame, text="üç≥ –ß–¢–û –ü–†–ò–ì–û–¢–û–í–ò–¢–¨?",
         font=("Arial", 18, "bold"), fg="#2E86AB", bg="#F8F9FA").pack()

# –í—ã–±–æ—Ä –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
selection_frame = tk.Frame(main_frame, bg="#F8F9FA")
selection_frame.pack(pady=15)

tk.Label(selection_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:",
         font=("Arial", 11, "bold"), fg="#333333", bg="#F8F9FA").pack(pady=(0, 8))

meal_var = tk.StringVar()
meal_combobox = ttk.Combobox(selection_frame, textvariable=meal_var,
                             values=list(recipes.keys()),
                             font=("Arial", 10), state="readonly",
                             width=18, height=8)
meal_combobox.pack(pady=5)
meal_combobox.set("–∑–∞–≤—Ç—Ä–∞–∫")

# –ö–Ω–æ–ø–∫–∏
button_frame = tk.Frame(main_frame, bg="#F8F9FA")
button_frame.pack(pady=15)

# –ö–Ω–æ–ø–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω—ã (–ø–æ–¥ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –Ω–∞–¥–ø–∏—Å—å)
RoundedButton(button_frame, text="üçΩÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", command=generate_recipe,
              bg="#2E86AB", fg="white", font=("Arial", 10, "bold"),
              width=160, height=38).pack(side=tk.LEFT, padx=8)

RoundedButton(button_frame, text="üé≤ –°–ª—É—á–∞–π–Ω–æ", command=random_meal,
              bg="#A23B72", fg="white", font=("Arial", 10, "bold"),
              width=160, height=38).pack(side=tk.LEFT, padx=8)

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
ttk.Separator(main_frame, orient='horizontal').pack(fill='x', pady=15)

# –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
result_frame = tk.Frame(main_frame, bg="#F8F9FA", height=280)  # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É
result_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
result_frame.pack_propagate(False)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
root.mainloop()
